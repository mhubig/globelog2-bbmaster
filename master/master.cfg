#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# vim: set ft=python :

import sys
from os import environ as env

from buildbot.buildslave.ec2 import EC2LatentBuildSlave

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import filter

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

from buildbot.config import BuilderConfig

####### SETTINGS

AWS_SECRET_ID  = env.get('AWS_ACCESS_KEY_ID', False)
AWS_SECRET_KEY = env.get('AWS_SECRET_ACCESS_KEY', False)
BUILDBOT_REPO  = env.get('BUILDBOT_REPO', False)
BUILDBOT_ADDR  = env.get('BUILDBOT_ADDR', False)
BUILDBOT_PASS  = env.get('BUILDBOT_PASS', False)
BUILDBOT_PORT  = env.get('BUILDBOT_PORT', False)

if False in (BUILDBOT_ADDR,
             BUILDBOT_PASS,
             BUILDBOT_REPO,
             BUILDBOT_PORT,
             AWS_SECRET_ID,
             AWS_SECRET_KEY):

    sys.exit(1)

EC2_AMI_ID         = env.get('EC2_AMI_ID', 'ami-7cae420b')
EC2_INSTANCE_TYPE  = env.get('EC2_INSTANCE_TYPE', 'c3.2xlarge')
EC2_DEFAULT_REGION = env.get('AWS_DEFAULT_REGION', 'eu-west-1')

SMTP_HOST = env.get('SMTP_HOST', 'smtp.google.com')
SMTP_USER = env.get('SMTP_USER', 'mhubig@imko.de')
SMTP_PASS = env.get('SMTP_PASS', False)
EMAIL_RCP = env.get('EMAIL_RCP', 'admin@imko.de')
EMAIL_SND = env.get('EMAIL_SND', 'mhubig@imko.de')

BUILDBOT_WEB  = 8080          # Buildbot webserver port
BUILDBOT_HOOK = 8011          # Buildbot stash hook port
TRIGGER_USER  = 'buildbot'    # Credential to authenticate build triggers
TRIGGER_PASS  = BUILDBOT_PASS # Credential to authenticate build triggers

c = BuildmasterConfig = {}

c['title']        = "GlobeLog"
c['titleURL']     = "waterfall"
c['buildbotURL']  = "http://{}:8080".format(BUILDBOT_ADDR)
c['db']           = {'db_url':"sqlite:///state.sqlite"}
c['slavePortnum'] = BUILDBOT_PORT

####### BUILDSLAVE

with open('user-data.sh') as f:
    user_data = f.read()

user_data = user_data.format(BUILDBOT_REPO=BUILDBOT_REPO,
                             BUILDBOT_ADDR=BUILDBOT_ADDR,
                             BUILDBOT_PORT=BUILDBOT_PORT,
                             BUILDBOT_PASS=BUILDBOT_PASS)

c['slaves'] = [EC2LatentBuildSlave(name='ec2-slave', password=BUILDBOT_PASS,
    instance_type=EC2_INSTANCE_TYPE, ami=EC2_AMI_ID, region=EC2_DEFAULT_REGION,
    identifier=AWS_ACCESS_KEY_ID, secret_identifier=AWS_SECRET_ACCESS_KEY,
    user_data=user_data)]

####### CHANGESOURCES

c['change_source'] = [GitPoller(pollinterval=60, repourl=BUILDBOT_REPO,
    branches=['master', 'develop'])]

####### SCHEDULERS

c['schedulers'] = [ForceScheduler(name='trigger',
    builderNames=['globelog-develop-builder', 'globelog-master-builder'])]

c['schedulers'] += [SingleBranchScheduler(name="new_commit_on_develop",
    change_filter=filter.ChangeFilter(repository=BUILDBOT_REPO,
    branch='develop'), treeStableTimer=2*60,
    builderNames=['globelog-develop-builder'])]

c['schedulers'] += [SingleBranchScheduler(name='new_commit_on_master',
    change_filter=filter.ChangeFilter(repository=BUILDBOT_REPO,
    branch='master'), treeStableTimer=2*60,
    builderNames=['globelog-master-builder'])]

####### BUILDERS

c['builders'] = []

# Development branch builder
factory = BuildFactory()

factory.addStep(Git(repourl=BUILDBOT_REPO, branch='develop', submodules=True,
    getDescription=True))
factory.addStep(ShellCommand(workdir=["os-base"],
    command="source environment && bitbake imko-image-globelog2"))
factory.addStep(FileUpload(
    slavesrc="build/tmp/deploy/images/imko-image-globelog2-m28.sdcard",
    masterdest="globelog2-image-{}.sdcard".format(Property('getDescription'))))

c['builders'].append(BuilderConfig(name='globelog-develop-builder',
    slavenames=['ec2-slave'], factory=factory))

# Master branch builder
factory = BuildFactory()

factory.addStep(Git(repourl=BUILDBOT_REPO, branch='master', submodules=True,
    getDescription=True))
factory.addStep(ShellCommand(workdir=["os-base"],
    command="source environment && bitbake imko-image-globelog2"))
factory.addStep(FileUpload(
    slavesrc="build/tmp/deploy/images/imko-image-globelog2-m28.sdcard",
    masterdest="globelog2-image-{}.sdcard".format(Property('getDescription'))))

c['builders'].append(BuilderConfig(name='globelog-master-builder',
    slavenames=['ec2-slave'], factory=factory))

####### STATUS TARGETS

authz_cfg = authz.Authz(auth=auth.BasicAuth([(TRIGGER_USER, TRIGGER_PASS)]),
    forceBuild='auth')

c['status'] = [html.WebStatus(http_port=BUILDBOT_WEB, authz=authz_cfg)]

c['status'].append(html.WebStatus(http_port=BUILDBOT_HOOK, allowForce=True,
    change_hook_dialects={ 'github': True }))

if not False in (SMTP_HOST, SMTP_USER, SMTP_PASS, EMAIL_RCP, EMAIL_SND):

    c['status'].append(MailNotifier(fromaddr=EMAIL_SND,
        sendToInterestedUsers=False, extraRecipients=[EMAIL_RCP],
        mode='failing', relayhost=SMTP_HOST, smtpPort=587,
        useTls=True, smtpUser=SMTP_USER, smtpPassword=SMTP_PASS))
