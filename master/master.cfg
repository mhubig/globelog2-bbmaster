#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# vim: set ft=python :

import sys
from os import environ as env
from uuid import uuid1 as uuid

from buildbot.buildslave.ec2 import EC2LatentBuildSlave

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler

from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import filter

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Property

from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.mail import MailNotifier

from buildbot.config import BuilderConfig

####### SETTINGS

PORT_WEB     = 8080       # Buildbot webserver port
PORT_STASH   = 8011       # Buildbot stash hook port
PORT_MASTER  = 9989       # Port where buildbot master listen buildworkers
TRIGGER_USER = 'buildbot' # Credential to authenticate build triggers
TRIGGER_PWD  = 'globelog' # Credential to authenticate build triggers
REPOSITORY   = 'http://stash.imko.de/scm/globlog/os-base.git' # The Repo
BUILDBOT_PWD = env.get('BUILDBOT_PWD', False)

EC2_AMI_ID         = env.get('EC2_AMI_ID', 'ami-7cae420b')
EC2_INSTANCE_TYPE  = env.get('EC2_INSTANCE_TYPE', 'c3.2xlarge')
EC2_DEFAULT_REGION = env.get('AWS_DEFAULT_REGION', 'eu-west-1')

SMTP_HOST = env.get('SMTP_HOST', 'smtp.google.com')
SMTP_USER = env.get('SMTP_USER', 'mhubig@imko.de')
SMTP_PWD  = env.get('SMTP_PWD', False)
EMAIL_RCP = env.get('EMAIL_RCP', 'admin@imko.de')
EMAIL_SND = env.get('EMAIL_SENDER', 'mhubig@imko.de')

AWS_ACCESS_KEY_ID     = env.get('AWS_ACCESS_KEY_ID', False)
AWS_SECRET_ACCESS_KEY = env.get('AWS_SECRET_ACCESS_KEY', False)

if not BUILDBOT_PWD or not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY:
    sys.exit(1)

c = BuildmasterConfig = {}

c['title'] = "GlobeLog"
c['titleURL'] = "waterfall"
c['buildbotURL'] = "http://localhost:8010"
c['db'] = {'db_url':"sqlite:///state.sqlite"}
c['slavePortnum'] = PORT_MASTER

####### BUILDSLAVE

c['slaves'] = [EC2LatentBuildSlave( name='ec2-slave', password=BUILDBOT_PWD,
    instance_type=EC2_INSTANCE_TYPE, ami=EC2_AMI_ID, region=EC2_DEFAULT_REGION,
    identifier=AWS_ACCESS_KEY_ID, secret_identifier=AWS_SECRET_ACCESS_KEY)]

####### CHANGESOURCES

c['change_source'] = [GitPoller(pollinterval=60, repourl=REPOSITORY,
    branches=['master', 'develop'])]

####### SCHEDULERS

c['schedulers'] = [ForceScheduler(name='trigger',
    builderNames=['globelog-develop-builder', 'globelog-master-builder'])]

c['schedulers'] += [SingleBranchScheduler(name="new_commit_on_develop",
    change_filter=filter.ChangeFilter(repository=REPOSITORY, branch='develop'),
    treeStableTimer=2*60, builderNames=['globelog-develop-builder'])]

c['schedulers'] += [SingleBranchScheduler(name='new_commit_on_master',
    change_filter=filter.ChangeFilter(repository=REPOSITORY, branch='master'),
    treeStableTimer=2*60, builderNames=['globelog-master-builder'])]

####### BUILDERS

c['builders'] = []

# Development branch builder
factory = BuildFactory()

factory.addStep(Git(repourl=REPOSITORY, branch='develop', submodules=True,
    getDescription=True))
factory.addStep(ShellCommand(workdir=["os-base"],
    command="source environment && bitbake imko-image-globelog2"))
factory.addStep(FileUpload(
    slavesrc="build/tmp/deploy/images/imko-image-globelog2-m28.sdcard",
    masterdest="globelog2-image-{}.sdcard".format(Property('getDescription'))))

c['builders'].append(BuilderConfig(name='globelog-develop-builder',
    slavenames=['ec2-slave'], factory=factory))

# Master branch builder
factory = BuildFactory()

factory.addStep(Git(repourl=REPOSITORY, branch='master', submodules=True,
    getDescription=True))
factory.addStep(ShellCommand(workdir=["os-base"],
    command="source environment && bitbake imko-image-globelog2"))
factory.addStep(FileUpload(
    slavesrc="build/tmp/deploy/images/imko-image-globelog2-m28.sdcard",
    masterdest="globelog2-image-{}.sdcard".format(Property('getDescription'))))

c['builders'].append(BuilderConfig(name='globelog-master-builder',
    slavenames=['ec2-slave'], factory=factory))

####### STATUS TARGETS

authz_cfg = authz.Authz(auth=auth.BasicAuth([(TRIGGER_USER, TRIGGER_PWD)]),
    forceBuild='auth')

c['status'] = [html.WebStatus(http_port=PORT_WEB, authz=authz_cfg)]

c['status'].append(html.WebStatus(http_port=PORT_STASH, allowForce=True,
    change_hook_dialects={ 'github': True }))

if not False in (SMTP_HOST, SMTP_USER, SMTP_PWD, EMAIL_RCP, EMAIL_SND):

    c['status'].append(MailNotifier(fromaddr=EMAIL_SND,
        sendToInterestedUsers=False, extraRecipients=[EMAIL_RCP],
        mode='failing', relayhost=SMTP_HOST, smtpPort=587,
        useTls=True, smtpUser=SMTP_USER, smtpPassword=SMTP_PWD))
